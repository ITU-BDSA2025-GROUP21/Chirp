name: Automatic_Test_Build_Deploy
run-name: ${{ github.actor }} is running a build

permissions:
  contents: write

on:
  push:
    tags:
      - "v*.*.*"

  workflow_dispatch:
    inputs:
      version:
        description: "Version tag to release (e.g., v1.2.3)"
        required: true
      prerelease:
        description: "Mark release as prerelease?"
        type: boolean
        default: false

env:
  TAG: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore -c Release

  test:
    name: test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Test
        run: dotnet test -c Release

  prep-release:
    name: Prep Release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          prerelease: ${{ github.event_name == 'workflow_dispatch' && inputs.prerelease || false }}
          generate_release_notes: true
          target_commitish: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release:
    name: RELEASE
    needs: prep-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [win-x64, linux-x64, osx-x64]
  
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Echo context and list repo
        shell: bash
        run: |
          echo "event: ${{ github.event_name }}"
          echo "ref_name: ${{ github.ref_name }}"
          echo "TAG: ${{ env.TAG || '' }}"
          echo "matrix.os: ${{ matrix.os }}"
          echo "workspace: $GITHUB_WORKSPACE"
          find . -maxdepth 3 -type f -name "*.csproj" -print
  
      - name: Locate project
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          # Prefer something named Chirp.CLI / Chirp.Cli
          CANDIDATE=$(git ls-files '**/*.csproj' | grep -Ei 'Chirp\.CL[Ii]\.csproj$' | head -n1 || true)
          if [ -z "${CANDIDATE:-}" ]; then
            # Fallback: pick first project whose OutputType is Exe
            while IFS= read -r p; do
              if grep -Eq '<OutputType>\s*Exe\s*</OutputType>' "$p"; then
                CANDIDATE="$p"; break
              fi
            done < <(git ls-files '**/*.csproj')
          fi
          if [ -z "${CANDIDATE:-}" ]; then
            echo "::error::No .csproj found (or none with OutputType Exe)."
            exit 66
          fi
          echo "PROJECT=$CANDIDATE" | tee -a "$GITHUB_ENV"
          echo "Project detected: $CANDIDATE"
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
  
      - name: .NET info
        run: |
          dotnet --info
          dotnet --list-sdks
          dotnet --list-runtimes || true
  
      - name: Install 7zip
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full
  
      - name: Publish
        shell: bash
        run: |
          set -Eeuo pipefail
          set -x
          TAG="${{ env.TAG || github.ref_name }}"
          RID="${{ matrix.os }}"
          OUT="Chirp-${TAG}-${RID}"
  
          rm -rf "$OUT" "$OUT.zip" || true
  
          dotnet restore "$PROJECT"
          dotnet build "$PROJECT" -c Release --no-restore
  
          dotnet publish "$PROJECT" \
            -c Release \
            -r "$RID" \
            --self-contained false \
            -p:PublishSingleFile=true \
            -o "$OUT"
  
          echo "Published files:"
          ls -la "$OUT"
  
      - name: Package
        shell: bash
        run: |
          set -Eeuo pipefail
          set -x
          TAG="${{ env.TAG || github.ref_name }}"
          RID="${{ matrix.os }}"
          OUT="Chirp-${TAG}-${RID}"
  
          7z a "$OUT.zip" "$OUT/."
          if 7z l "$OUT.zip" | grep -Ei '\.pdb$' >/dev/null; then
            7z d "$OUT.zip" '*.pdb' || true
          fi
          7z l "$OUT.zip" || true
          rm -rf "$OUT"
  
      - name: Upload assets to release
        uses: softprops/action-gh-release@v2
        with:
          files: "Chirp-*.zip"
          tag_name: ${{ env.TAG || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
